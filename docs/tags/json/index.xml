<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Boris van Katwijk</title>
    <link>https://bvkatwijk.github.io/tags/json/</link>
    <description>Recent content in Json on Boris van Katwijk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Feb 2025 10:56:30 +0000</lastBuildDate>
    <atom:link href="https://bvkatwijk.github.io/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Json Unit Testing</title>
      <link>https://bvkatwijk.github.io/blog/java---json-unit-testing/</link>
      <pubDate>Tue, 04 Feb 2025 16:19:25 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---json-unit-testing/</guid>
      <description>&lt;p&gt;Many applications have APIs consuming and returning JSON. If you do not cover the expected inputs and output of the API you risk introducing unintentional changes. Luckily it is not hard to create these valuable test cases.&#xA;If you have types that are used both as symmetrical inputs and outputs this test pattern will provide full coverage and give you utility methods for other tests as well.&lt;/p&gt;&#xA;&lt;p&gt;For this example I&amp;rsquo;ll be using a type &lt;code&gt;Task&lt;/code&gt; having just a &lt;code&gt;name&lt;/code&gt; and a &lt;code&gt;description&lt;/code&gt; field, both &lt;code&gt;String&lt;/code&gt;s:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

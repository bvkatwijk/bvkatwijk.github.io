<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dx on Boris van Katwijk</title>
    <link>https://bvkatwijk.github.io/tags/dx/</link>
    <description>Recent content in Dx on Boris van Katwijk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Feb 2025 13:47:50 +0000</lastBuildDate>
    <atom:link href="https://bvkatwijk.github.io/tags/dx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>j2html</title>
      <link>https://bvkatwijk.github.io/blog/j2html/</link>
      <pubDate>Thu, 30 Jan 2025 10:33:19 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/j2html/</guid>
      <description>&lt;p&gt;For my full-stack projects I like to use Server-Side rendering with &lt;a href=&#34;https://javalin.io/&#34;&gt;Javalin&lt;/a&gt;, &lt;a href=&#34;https://j2html.com/&#34;&gt;j2html&lt;/a&gt; and &lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt;. Together, these libraries allow you to write interactive full-stack web applications in vanilla java. In this post I&amp;rsquo;d like to explain how the &lt;a href=&#34;https://j2html.com/&#34;&gt;j2html&lt;/a&gt; library fits in this setup, go over a few benefits, and link a &lt;a href=&#34;https://bvankatwijk.nl/j2html-converter/&#34;&gt;converter&lt;/a&gt; that I wrote to make building the user interface easier.&lt;/p&gt;&#xA;&lt;h3 id=&#34;server-side-rendering&#34;&gt;Server Side Rendering&lt;/h3&gt;&#xA;&lt;p&gt;While the last decade was dominated by client-side frameworks, many applications could perhaps have saved a lot of development time by using server-side rendering. This means that the resulting html is built on the server, including its data, styling and behaviour.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Awaitility</title>
      <link>https://bvkatwijk.github.io/blog/awaitility/</link>
      <pubDate>Mon, 07 Oct 2024 10:01:38 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/awaitility/</guid>
      <description>&lt;p&gt;Writing tests on asynchronous code can be a challenge. Given an asynchronous process to test, we may try to use custom code to wait for the process to finish or reach a certain state. This may cause us to end up with tests that are flaky, slow, or hard to understand. It is not uncommon for legacy projects to have these setups, and perhaps they can be improved a little.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://bvkatwijk.github.io/blog/hugo/</link>
      <pubDate>Tue, 24 Sep 2024 18:48:00 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/hugo/</guid>
      <description>&lt;p&gt;This website was made using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, following the quick start tutorial and iterating from there. So far its been a lot of fun, and gradually expanding website functionality has been a very natural process.&lt;/p&gt;&#xA;&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;&#xA;&lt;p&gt;I use &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; to create my content, allowing me to write using &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;MarkDown&lt;/a&gt;. Using &lt;a href=&#34;https://github.com/platers/obsidian-linter&#34;&gt;Obsidian Linter&lt;/a&gt; I can automatically insert &lt;a href=&#34;https://en.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt; properties that Hugo will pick up as metadata.&#xA;Using this setup there is a nice separation between site content and site functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java - Error Return Types</title>
      <link>https://bvkatwijk.github.io/blog/java---error-return-types/</link>
      <pubDate>Wed, 18 Sep 2024 15:34:48 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---error-return-types/</guid>
      <description>&lt;p&gt;Writing code assuming everything will follow the happy path may not result in the best software quality or user experience. Sometimes we choose to ignore unhappy paths, or lack awareness of the existence of unhappy paths. Both of these scenarios can lead to runtime bugs and problems for customers which may be good to prevent.&lt;/p&gt;&#xA;&lt;p&gt;Many strategies and coding styles exist in different languages to give the developer tools to address this issue. In this post I&amp;rsquo;d like to explore some of them and illustrate my preferences.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

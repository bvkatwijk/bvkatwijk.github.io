<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on Boris van Katwijk</title>
    <link>https://bvkatwijk.github.io/tags/data/</link>
    <description>Recent content in Data on Boris van Katwijk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Nov 2024 15:52:50 +0000</lastBuildDate>
    <atom:link href="https://bvkatwijk.github.io/tags/data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lenses</title>
      <link>https://bvkatwijk.github.io/blog/java---lenses/</link>
      <pubDate>Sat, 26 Oct 2024 18:26:22 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---lenses/</guid>
      <description>&lt;h3 id=&#34;immutability&#34;&gt;Immutability&lt;/h3&gt;&#xA;&lt;p&gt;Using immutable types has a number of benefits. Since it eliminates mutation, it makes code easier to reason about. Also, it eliminates concurrent modification problems, thereby unlocking a lot of performance improvement opportunities. Java originally was fully Object-Oriented but it adapted to other paradigms. The language itself still lacks some features that makes it convenient to work with immutable data. In this post I&amp;rsquo;d like to show what can currently be done in vanilla Java and show a powerful concept to transform immutable data.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Boris van Katwijk</title>
    <link>https://bvkatwijk.github.io/blog/</link>
    <description>Recent content in Blogs on Boris van Katwijk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jan 2025 12:37:45 +0000</lastBuildDate>
    <atom:link href="https://bvkatwijk.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>j2html</title>
      <link>https://bvkatwijk.github.io/blog/java---j2html/</link>
      <pubDate>Thu, 30 Jan 2025 10:33:19 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---j2html/</guid>
      <description>&lt;p&gt;For my full-stack projects I like to use Server-Side rendering with &lt;a href=&#34;https://javalin.io/&#34;&gt;Javalin&lt;/a&gt;, &lt;a href=&#34;https://j2html.com/&#34;&gt;j2html&lt;/a&gt; and &lt;a href=&#34;https://htmx.org/&#34;&gt;htmx&lt;/a&gt;. Together, these libraries allow you to write interactive full-stack web applications in vanilla java. In this post I&amp;rsquo;d like to explain how the &lt;a href=&#34;https://j2html.com/&#34;&gt;j2html&lt;/a&gt; library fits in this setup, go over a few benefits, and link a &lt;a href=&#34;https://bvankatwijk.nl/j2html-converter/&#34;&gt;converter&lt;/a&gt; that I wrote to make building the user interface easier.&lt;/p&gt;&#xA;&lt;h3 id=&#34;server-side-rendering&#34;&gt;Server Side Rendering&lt;/h3&gt;&#xA;&lt;p&gt;While the last decade was dominated by client-side frameworks, many applications could perhaps have saved a lot of development time by using server-side rendering. This means that the resulting html is built on the server, including its data, styling and behaviour.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lenses</title>
      <link>https://bvkatwijk.github.io/blog/java---lenses/</link>
      <pubDate>Sat, 26 Oct 2024 18:26:22 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---lenses/</guid>
      <description>&lt;h3 id=&#34;immutability&#34;&gt;Immutability&lt;/h3&gt;&#xA;&lt;p&gt;Using immutable types has a number of benefits. Since it eliminates mutation, it makes code easier to reason about. Also, it eliminates concurrent modification problems, thereby unlocking a lot of performance improvement opportunities. Java originally was fully Object-Oriented but it adapted to other paradigms. The language itself still lacks some features that makes it convenient to work with immutable data. In this post I&amp;rsquo;d like to show what can currently be done in vanilla Java and show a powerful concept to transform immutable data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Awaitility</title>
      <link>https://bvkatwijk.github.io/blog/awaitility/</link>
      <pubDate>Mon, 07 Oct 2024 10:01:38 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/awaitility/</guid>
      <description>&lt;p&gt;Writing tests on asynchronous code can be a challenge. Given an asynchronous process to test, we may try to use custom code to wait for the process to finish or reach a certain state. This may cause us to end up with tests that are flaky, slow, or hard to understand. It is not uncommon for legacy projects to have these setups, and perhaps they can be improved a little.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Brainmade Mark</title>
      <link>https://bvkatwijk.github.io/blog/ai---the-brainmade-mark/</link>
      <pubDate>Fri, 04 Oct 2024 12:57:23 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/ai---the-brainmade-mark/</guid>
      <description>&lt;p&gt;Generative models (colloquially: AI) are here and they will never leave again. The quality of generated material, especially text, has improved enough that has become hard to tell if it was (partially) generated by AI.&lt;/p&gt;&#xA;&lt;p&gt;Since no rule exists mandating an indication what content is AI-generated, we are faced with choosing between not caring if something was artificially generated, assuming everything is AI-generated, or becoming experts at differentiating between AI and human made content, a battle which AI will likely win.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Link Swapping</title>
      <link>https://bvkatwijk.github.io/blog/security---link-swapping/</link>
      <pubDate>Tue, 01 Oct 2024 09:14:11 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/security---link-swapping/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re on a website and you see a link, how do you figure out where that link will take you? Just hover over it right? Try to hovering this &lt;a href = &#34;https://wikipedia.org&#34; onclick=&#34;this.href = &#39;https://www.youtube.com/watch?v=dQw4w9WgXcQ&#39;;&#34; target=&#34;_blank&#34;&gt;Totally Legitimate Link&lt;/a&gt;. If you dare, click it.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve clicked the link, welcome back! Refresh the page to have the link in it&amp;rsquo;s initial state again. Not everything is what it seems, and this is also very true when browsing the web.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo</title>
      <link>https://bvkatwijk.github.io/blog/dev---hugo/</link>
      <pubDate>Tue, 24 Sep 2024 18:48:00 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/dev---hugo/</guid>
      <description>&lt;p&gt;This website was made using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, following the quick start tutorial and iterating from there. So far its been a lot of fun, and gradually expanding website functionality has been a very natural process.&lt;/p&gt;&#xA;&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;&#xA;&lt;p&gt;I use &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; to create my content, allowing me to write using &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;MarkDown&lt;/a&gt;. Using &lt;a href=&#34;https://github.com/platers/obsidian-linter&#34;&gt;Obsidian Linter&lt;/a&gt; I can automatically insert &lt;a href=&#34;https://en.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt; properties that Hugo will pick up as metadata.&#xA;Using this setup there is a nice separation between site content and site functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java - Unique Enum Field values</title>
      <link>https://bvkatwijk.github.io/blog/java---unique-enum-field-values/</link>
      <pubDate>Tue, 24 Sep 2024 17:26:44 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---unique-enum-field-values/</guid>
      <description>&lt;p&gt;When you have a &lt;a href=&#34;https://www.baeldung.com/a-guide-to-java-enums&#34;&gt;Java Enum&lt;/a&gt; with a field, a requirement can be that the field value needs to be unique. Using a utility method it can be easy to create a test for this. Given an Enum class with a field (using some &lt;a href=&#34;https://bvkatwijk.github.io/wiki/lombok/&#34;&gt;Lombok&lt;/a&gt;):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Getter&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Accessors&lt;/span&gt;(fluent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Sides {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LEFT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;),  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RIGHT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String label;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can enforce uniqueness using a unit test:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.vavr.collection.HashMap;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.vavr.collection.Vector;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.jupiter.api.Test;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.function.Function;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import static&lt;/span&gt; org.junit.jupiter.api.Assertions.assertEquals;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SidesTest&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;() {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assertUnique(Sides.&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;(), Sides::label);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;assertUnique&lt;/span&gt;(T&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; values, Function&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fieldValue) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assertEquals(  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            HashMap.&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;(),  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Vector.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(values)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;groupBy&lt;/span&gt;(fieldValue)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(it &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; it.&lt;span style=&#34;color:#a6e22e&#34;&gt;_2&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 1));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test will automatically validate that all fields have distinct values, even if the Enum expands or changes in the future. Failures will report the enum values that have the same property. If we misconfigure the enum above ( &lt;code&gt;RIGHT(&amp;quot;left&amp;quot;)&lt;/code&gt;) we see which value occurred multiple times, and in which Enum values:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shell - Switch Statements</title>
      <link>https://bvkatwijk.github.io/blog/shell---switch-statements/</link>
      <pubDate>Sat, 21 Sep 2024 21:28:03 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/shell---switch-statements/</guid>
      <description>&lt;p&gt;Recently I had to work a bit more than usual on shell scripting, and had to do a bunch of switches. I used this also in the scripts for this project. A simplified impression shows how we can match user input with supported commands:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CMD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CMD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; in&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cmdRun&amp;#34;&lt;/span&gt; ;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;publish&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cmdPublish&amp;#34;&lt;/span&gt; ;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;*&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown command &lt;/span&gt;$CMD&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;; exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way we can match the provided input with supported cases (&lt;code&gt;&amp;quot;run&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;publish&amp;quot;&lt;/code&gt;), and error otherwise (&lt;code&gt;*&lt;/code&gt;). The double semicolon (&lt;code&gt;;;&lt;/code&gt;) marks the end of a case.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java - Error Return Types</title>
      <link>https://bvkatwijk.github.io/blog/java---error-return-types/</link>
      <pubDate>Wed, 18 Sep 2024 15:34:48 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---error-return-types/</guid>
      <description>&lt;p&gt;Writing code assuming everything will follow the happy path may not result in the best software quality or user experience. Sometimes we choose to ignore unhappy paths, or lack awareness of the existence of unhappy paths. Both of these scenarios can lead to runtime bugs and problems for customers which may be good to prevent.&lt;/p&gt;&#xA;&lt;p&gt;Many strategies and coding styles exist in different languages to give the developer tools to address this issue. In this post I&amp;rsquo;d like to explore some of them and illustrate my preferences.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

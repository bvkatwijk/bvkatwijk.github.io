<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boris van Katwijk</title>
    <link>https://bvkatwijk.github.io/</link>
    <description>Recent content on Boris van Katwijk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2024 15:40:19 +0000</lastBuildDate>
    <atom:link href="https://bvkatwijk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BORIS VAN KATWIJK</title>
      <link>https://bvkatwijk.github.io/main/</link>
      <pubDate>Wed, 18 Sep 2024 15:34:48 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/main/</guid>
      <description>&lt;h1 id=&#34;boris-van-katwijk&#34;&gt;BORIS VAN KATWIJK&lt;/h1&gt;&#xA;&lt;p&gt;Software Engineer&lt;/p&gt;</description>
    </item>
    <item>
      <title>Error Values</title>
      <link>https://bvkatwijk.github.io/blog/error-values/</link>
      <pubDate>Wed, 18 Sep 2024 15:15:39 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/error-values/</guid>
      <description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type Safe Return Values</title>
      <link>https://bvkatwijk.github.io/blog/type-safe-return-values/</link>
      <pubDate>Wed, 18 Sep 2024 13:33:23 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/type-safe-return-values/</guid>
      <description>&lt;p&gt;When writing high-level business logic, I prefer to expose an API that uses type safe constructs. An critical part is the return value.&lt;/p&gt;&#xA;&lt;p&gt;Suppose we design an API for baking pizza:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;record&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt;() { }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s design a &lt;code&gt;Baker&lt;/code&gt; capable of creating &lt;code&gt;Pizza&lt;/code&gt;. I&amp;rsquo;ll be using an &lt;code&gt;interface&lt;/code&gt; since the actual logic is not relevant for this example.&lt;/p&gt;&#xA;&lt;p&gt;Unfortunately our &lt;code&gt;Baker&lt;/code&gt; sometimes runs out of ingredients. However, our API does not reveal this fact. We can choose how we are going to express the possible paths of failure, and listed below are some common options. I frequently encounter solutions that results in poor handling and developer ergonomics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java - Unique Enum Field values</title>
      <link>https://bvkatwijk.github.io/blog/java---unique-enum-field-values/</link>
      <pubDate>Wed, 18 Sep 2024 11:51:15 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/java---unique-enum-field-values/</guid>
      <description>&lt;p&gt;When you have a &lt;a href=&#34;https://www.baeldung.com/a-guide-to-java-enums&#34;&gt;Java Enum&lt;/a&gt; with a field, a requirement can be that the field value needs to be unique. Using a utility method it can be easy to create a test for this. Given an Enum class with a field (using some &lt;a href=&#34;https://bvkatwijk.github.io/wiki/lombok/&#34;&gt;Lombok&lt;/a&gt;):**&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Getter&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RequiredArgsConstructor&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Accessors&lt;/span&gt;(fluent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; Sides {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LEFT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;),  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RIGHT(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String label;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can enforce uniqueness using a unit test:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.vavr.collection.HashMap;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.vavr.collection.Vector;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.jupiter.api.Test;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.function.Function;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import static&lt;/span&gt; org.junit.jupiter.api.Assertions.assertEquals;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SidesTest&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unique&lt;/span&gt;() {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assertUnique(Sides.&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;(), Sides::label);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;assertUnique&lt;/span&gt;(T&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; values, Function&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T, String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fieldValue) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assertEquals(  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            HashMap.&lt;span style=&#34;color:#a6e22e&#34;&gt;empty&lt;/span&gt;(),  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Vector.&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;(values)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;groupBy&lt;/span&gt;(fieldValue)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(it &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; it.&lt;span style=&#34;color:#a6e22e&#34;&gt;_2&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 1));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test will automatically validate that all fields have distinct values, even if the Enum expands or changes in the future. Failures will report the enum values that have the same property. If we misconfigure the enum above ( &lt;code&gt;RIGHT(&amp;quot;left&amp;quot;)&lt;/code&gt;) we see:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lombok</title>
      <link>https://bvkatwijk.github.io/wiki/lombok/</link>
      <pubDate>Wed, 18 Sep 2024 11:31:32 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/wiki/lombok/</guid>
      <description>&lt;p&gt;One of my favourite tools in the Java ecosystem is &lt;a href=&#34;https://projectlombok.org/&#34;&gt;Lombok&lt;/a&gt;. It reduces the code you have to write, and increases the correctness of your code.&lt;/p&gt;&#xA;&lt;p&gt;These days I usually include this &lt;code&gt;lombok.config&lt;/code&gt; &lt;a href=&#34;https://projectlombok.org/features/configuration&#34;&gt;configuration file&lt;/a&gt; in the root of my projects:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;config.stopBubbling = true&#xA;lombok.addLombokGeneratedAnnotation = true&#xA;lombok.fieldDefaults.defaultPrivate = true&#xA;lombok.fieldDefaults.defaultFinal = true&#xA;lombok.accessors.chain = true&#xA;lombok.accessors.fluent = true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;&#xA;&lt;p&gt;When I use setters, I prefer to return the instance I&amp;rsquo;m working on to be able to chain a lot of calls together. This is set as the default using &lt;code&gt;lombok.accessors.chain = true&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CDK -  ID, names, and resource replacement</title>
      <link>https://bvkatwijk.github.io/blog/aws-cdk----id-names-and-resource-replacement/</link>
      <pubDate>Wed, 18 Sep 2024 10:32:08 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/blog/aws-cdk----id-names-and-resource-replacement/</guid>
      <description>&lt;p&gt;Coming soon&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TopDesk Exchange Sync</title>
      <link>https://bvkatwijk.github.io/work/topdesk/topdesk-exchange-sync/</link>
      <pubDate>Wed, 18 Sep 2024 09:57:57 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/work/topdesk/topdesk-exchange-sync/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://bvkatwijk.github.io/work/topdesk/&#34;&gt;topdesk&lt;/a&gt; I was part of a team working on a two-way synchronisation between &lt;a href=&#34;https://www.microsoft.com/en/microsoft-365/exchange/&#34;&gt;Microsoft Exchange&lt;/a&gt; and &lt;a href=&#34;https://www.topdesk.com/en/features/reservations-management/&#34;&gt;Topdesk Reservations&lt;/a&gt;. The goal was to allow different departments of a large organisation to use the room reservation system of their preference. Most branches of this organisation used Microsoft Exchange to book meeting rooms, whereas Office Management staff used Topdesk Reservations.&lt;/p&gt;&#xA;&lt;h3 id=&#34;race-conditions&#34;&gt;Race Conditions&lt;/h3&gt;&#xA;&lt;p&gt;When working on a two-way integration, one of the challenges can be race conditions where conflicting valid data exists in both of the systems. For example, in this case multiple people could book a room at the same time in different systems. The application logic of both systems will allow the reservation, but the synchronisation needs to be able to resolve these conflicts gracefully.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://bvkatwijk.github.io/wiki/vavr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/wiki/vavr/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://bvkatwijk.github.io/work/headfirst-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/work/headfirst-group/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://headfirst.group/en/&#34;&gt;HeadFirst Group&lt;/a&gt; I am currently working on various projects in CI/CD, Cloud, Ops, DX, IAC.&lt;/p&gt;&#xA;&lt;h3 id=&#34;aws-cdk&#34;&gt;AWS CDK&lt;/h3&gt;&#xA;&lt;p&gt;Existing infrastructure was a mix between hand-managed and Ansible playbooks using a mix of community plugins. Since the cloud scope was strictly limited to AWS, we migrated our cloud setup to AWS CDK.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://bvkatwijk.github.io/work/topdesk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bvkatwijk.github.io/work/topdesk/</guid>
      <description>&lt;p&gt;At topdesk it was so interesting haha&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bvkatwijk.github.io/work/topdesk/topdesk-exchange-sync/&#34;&gt;Two-way synchronisation between Microsoft Exchange and Topdesk Reservations&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Catalog Webshop&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
